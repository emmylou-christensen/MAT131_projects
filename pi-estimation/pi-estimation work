#this code captures the estimates for a pi - for several runs of 1000 throws each

#set-up
import turtle
import random 
import math
import altair
import sys
sys.setExecutionLimit(60000)
hyp_circle = []
hyp_total = []
totalpi = []

#make dartboard
wn = turtle.Screen()
flu = turtle.Turtle()
flu.shape("circle")
flu.color("black")
flu.tracer(1000,1000)
# set the world coordinates so that (0,0) is the middle
# and the board is 2 by 2. 
wn.setworldcoordinates(-1,-1,1,1)


#dart simulation
     
for i in range(100):     #i want 100 values of pi so i'm putting all my code within a range of 100
    for n in range(2000): #we want 2000 darts so we choose a range of 2000
        a = random.uniform(-1,1) 
        b = random.uniform(-1,1)
        hyp = (a**2 + b**2)**.5 #this is the equation for the hypotenuse
        if hyp<=1: #for all hypotenuse (mini radius) values inside the circle
            hyp_circle.append(hyp) 
            hyp_total.append(hyp) #these two lines add values to their respective lists
        else:
            hyp_total.append(hyp) #we want all values within the total list. there might be an easier way to do this
                                    #but this is what worked for me

#calculating percentage that landed in circle
    numincircle = len(hyp_circle) #adding up how many landed in the circle
    numtotal = len(hyp_total) #adding up total darts (we know it's 2000 but no hardcoding!)

    
    p_incircle = (numincircle/numtotal) #calculating percentage
    pi = p_incircle*4 #multiplying by 4 to approximate pi
    totalpi.append(pi) #we then add each estimate to our list
print(totalpi)
    
    
#histogram
data = altair.Data(totalpi = totalpi)
chart = altair.Chart(data)
mark = chart.mark_bar()
Y = altair.Axis('totalpi:N', bin=True)
X = altair.Axis('count()')
enc = mark.encode(x=Y, y=X)
enc.display() #i copied all this code from the project we used kiva data for 

#done!
